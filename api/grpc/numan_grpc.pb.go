// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumanClient is the client API for Numan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumanClient interface {
	//Adds a new unused number to database.
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	//Not implemented
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error)
	//List returns a filtered list of numbers
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	//ListUserID gets list of numbers attached to specific UserID
	ListUserID(ctx context.Context, in *ListUserIDRequest, opts ...grpc.CallOption) (*ListUserIDResponse, error)
	//Reserve locks a number to a UserID until untilTS (unix timestamp)
	Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error)
	//Allocate marks a number 'used' by a
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error)
	//DeAllocate number from User (number goes to quarantine)
	DeAllocate(ctx context.Context, in *DeAllocateRequest, opts ...grpc.CallOption) (*DeAllocateResponse, error)
	//Portout sets a port out date (just a log, doesn't care about state or do anything else)
	Portout(ctx context.Context, in *PortoutRequest, opts ...grpc.CallOption) (*PortoutResponse, error)
	//Portin sets a port in date (just a log, doesn't care about state or do anything else)
	Portin(ctx context.Context, in *PortinRequest, opts ...grpc.CallOption) (*PortinResponse, error)
	//Delete - number no longer used, removed from number db, must be unused (history kept).
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	//View formatted table of details for a specific number (with history).
	View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error)
	//Summary formatted table of usage stats
	Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error)
}

type numanClient struct {
	cc grpc.ClientConnInterface
}

func NewNumanClient(cc grpc.ClientConnInterface) NumanClient {
	return &numanClient{cc}
}

func (c *numanClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error) {
	out := new(AddGroupResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) ListUserID(ctx context.Context, in *ListUserIDRequest, opts ...grpc.CallOption) (*ListUserIDResponse, error) {
	out := new(ListUserIDResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/ListUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error) {
	out := new(ReserveResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/Reserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error) {
	out := new(AllocateResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) DeAllocate(ctx context.Context, in *DeAllocateRequest, opts ...grpc.CallOption) (*DeAllocateResponse, error) {
	out := new(DeAllocateResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/DeAllocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) Portout(ctx context.Context, in *PortoutRequest, opts ...grpc.CallOption) (*PortoutResponse, error) {
	out := new(PortoutResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/Portout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) Portin(ctx context.Context, in *PortinRequest, opts ...grpc.CallOption) (*PortinResponse, error) {
	out := new(PortinResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/Portin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error) {
	out := new(ViewResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numanClient) Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error) {
	out := new(SummaryResponse)
	err := c.cc.Invoke(ctx, "/grpc.Numan/Summary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumanServer is the server API for Numan service.
// All implementations must embed UnimplementedNumanServer
// for forward compatibility
type NumanServer interface {
	//Adds a new unused number to database.
	Add(context.Context, *AddRequest) (*AddResponse, error)
	//Not implemented
	AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error)
	//List returns a filtered list of numbers
	List(context.Context, *ListRequest) (*ListResponse, error)
	//ListUserID gets list of numbers attached to specific UserID
	ListUserID(context.Context, *ListUserIDRequest) (*ListUserIDResponse, error)
	//Reserve locks a number to a UserID until untilTS (unix timestamp)
	Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error)
	//Allocate marks a number 'used' by a
	Allocate(context.Context, *AllocateRequest) (*AllocateResponse, error)
	//DeAllocate number from User (number goes to quarantine)
	DeAllocate(context.Context, *DeAllocateRequest) (*DeAllocateResponse, error)
	//Portout sets a port out date (just a log, doesn't care about state or do anything else)
	Portout(context.Context, *PortoutRequest) (*PortoutResponse, error)
	//Portin sets a port in date (just a log, doesn't care about state or do anything else)
	Portin(context.Context, *PortinRequest) (*PortinResponse, error)
	//Delete - number no longer used, removed from number db, must be unused (history kept).
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	//View formatted table of details for a specific number (with history).
	View(context.Context, *ViewRequest) (*ViewResponse, error)
	//Summary formatted table of usage stats
	Summary(context.Context, *SummaryRequest) (*SummaryResponse, error)
	mustEmbedUnimplementedNumanServer()
}

// UnimplementedNumanServer must be embedded to have forward compatible implementations.
type UnimplementedNumanServer struct {
}

func (UnimplementedNumanServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedNumanServer) AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedNumanServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNumanServer) ListUserID(context.Context, *ListUserIDRequest) (*ListUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserID not implemented")
}
func (UnimplementedNumanServer) Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}
func (UnimplementedNumanServer) Allocate(context.Context, *AllocateRequest) (*AllocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedNumanServer) DeAllocate(context.Context, *DeAllocateRequest) (*DeAllocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeAllocate not implemented")
}
func (UnimplementedNumanServer) Portout(context.Context, *PortoutRequest) (*PortoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portout not implemented")
}
func (UnimplementedNumanServer) Portin(context.Context, *PortinRequest) (*PortinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portin not implemented")
}
func (UnimplementedNumanServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNumanServer) View(context.Context, *ViewRequest) (*ViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedNumanServer) Summary(context.Context, *SummaryRequest) (*SummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedNumanServer) mustEmbedUnimplementedNumanServer() {}

// UnsafeNumanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumanServer will
// result in compilation errors.
type UnsafeNumanServer interface {
	mustEmbedUnimplementedNumanServer()
}

func RegisterNumanServer(s grpc.ServiceRegistrar, srv NumanServer) {
	s.RegisterService(&Numan_ServiceDesc, srv)
}

func _Numan_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).AddGroup(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_ListUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).ListUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/ListUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).ListUserID(ctx, req.(*ListUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).Reserve(ctx, req.(*ReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).Allocate(ctx, req.(*AllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_DeAllocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeAllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).DeAllocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/DeAllocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).DeAllocate(ctx, req.(*DeAllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_Portout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).Portout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/Portout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).Portout(ctx, req.(*PortoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_Portin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).Portin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/Portin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).Portin(ctx, req.(*PortinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).View(ctx, req.(*ViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numan_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumanServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Numan/Summary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumanServer).Summary(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Numan_ServiceDesc is the grpc.ServiceDesc for Numan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Numan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Numan",
	HandlerType: (*NumanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Numan_Add_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _Numan_AddGroup_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Numan_List_Handler,
		},
		{
			MethodName: "ListUserID",
			Handler:    _Numan_ListUserID_Handler,
		},
		{
			MethodName: "Reserve",
			Handler:    _Numan_Reserve_Handler,
		},
		{
			MethodName: "Allocate",
			Handler:    _Numan_Allocate_Handler,
		},
		{
			MethodName: "DeAllocate",
			Handler:    _Numan_DeAllocate_Handler,
		},
		{
			MethodName: "Portout",
			Handler:    _Numan_Portout_Handler,
		},
		{
			MethodName: "Portin",
			Handler:    _Numan_Portin_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Numan_Delete_Handler,
		},
		{
			MethodName: "View",
			Handler:    _Numan_View_Handler,
		},
		{
			MethodName: "Summary",
			Handler:    _Numan_Summary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "numan.proto",
}
