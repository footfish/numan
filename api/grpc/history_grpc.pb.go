// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HistoryClient is the client API for History service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryClient interface {
	//Finds history entries logged for a particular number
	ListHistoryByNumber(ctx context.Context, in *ListHistoryByNumberRequest, opts ...grpc.CallOption) (*ListHistoryResponse, error)
	//Finds history entries logged for a particual owner
	ListHistoryByOID(ctx context.Context, in *ListHistoryByOIDRequest, opts ...grpc.CallOption) (*ListHistoryResponse, error)
}

type historyClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryClient(cc grpc.ClientConnInterface) HistoryClient {
	return &historyClient{cc}
}

func (c *historyClient) ListHistoryByNumber(ctx context.Context, in *ListHistoryByNumberRequest, opts ...grpc.CallOption) (*ListHistoryResponse, error) {
	out := new(ListHistoryResponse)
	err := c.cc.Invoke(ctx, "/grpc.History/ListHistoryByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) ListHistoryByOID(ctx context.Context, in *ListHistoryByOIDRequest, opts ...grpc.CallOption) (*ListHistoryResponse, error) {
	out := new(ListHistoryResponse)
	err := c.cc.Invoke(ctx, "/grpc.History/ListHistoryByOID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryServer is the server API for History service.
// All implementations must embed UnimplementedHistoryServer
// for forward compatibility
type HistoryServer interface {
	//Finds history entries logged for a particular number
	ListHistoryByNumber(context.Context, *ListHistoryByNumberRequest) (*ListHistoryResponse, error)
	//Finds history entries logged for a particual owner
	ListHistoryByOID(context.Context, *ListHistoryByOIDRequest) (*ListHistoryResponse, error)
	mustEmbedUnimplementedHistoryServer()
}

// UnimplementedHistoryServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryServer struct {
}

func (UnimplementedHistoryServer) ListHistoryByNumber(context.Context, *ListHistoryByNumberRequest) (*ListHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryByNumber not implemented")
}
func (UnimplementedHistoryServer) ListHistoryByOID(context.Context, *ListHistoryByOIDRequest) (*ListHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryByOID not implemented")
}
func (UnimplementedHistoryServer) mustEmbedUnimplementedHistoryServer() {}

// UnsafeHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryServer will
// result in compilation errors.
type UnsafeHistoryServer interface {
	mustEmbedUnimplementedHistoryServer()
}

func RegisterHistoryServer(s grpc.ServiceRegistrar, srv HistoryServer) {
	s.RegisterService(&History_ServiceDesc, srv)
}

func _History_ListHistoryByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoryByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).ListHistoryByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.History/ListHistoryByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).ListHistoryByNumber(ctx, req.(*ListHistoryByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_ListHistoryByOID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoryByOIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).ListHistoryByOID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.History/ListHistoryByOID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).ListHistoryByOID(ctx, req.(*ListHistoryByOIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// History_ServiceDesc is the grpc.ServiceDesc for History service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var History_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.History",
	HandlerType: (*HistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHistoryByNumber",
			Handler:    _History_ListHistoryByNumber_Handler,
		},
		{
			MethodName: "ListHistoryByOID",
			Handler:    _History_ListHistoryByOID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "history.proto",
}
